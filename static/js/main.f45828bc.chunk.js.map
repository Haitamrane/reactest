{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createOffer","console","log","pc","offerToReceiveVideo","offerToReceiveAudio","then","sdp","JSON","stringify","setLocalDescription","setRemoteDescription","desc","parse","textref","value","RTCSessionDescription","createAnswer","e","addCandidate","candidate","addIceCandidate","RTCIceCandidate","localVideoref","React","createRef","remoteVideoref","this","RTCPeerConnection","onicecandidate","oniceconnectionstatechange","onaddsteam","current","srcObject","stream","navigator","getUserMedia","video","audio","addStream","style","width","height","margin","background","ref","autoPlay","controls","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2MAmGeA,E,kDAhGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAwCNC,YAAc,WACZC,QAAQC,IAAI,SACZ,EAAKC,GAAGH,YAAY,CAACI,oBAAqB,EAAGC,oBAAqB,IACjEC,MAAK,SAAAC,GACJN,QAAQC,IAAIM,KAAKC,UAAUF,IAC3B,EAAKJ,GAAGO,oBAAoBH,OA9Cf,EAkDjBI,qBAAuB,WACrB,IAAMC,EAAOJ,KAAKK,MAAM,EAAKC,QAAQC,OAErC,EAAKZ,GAAGQ,qBAAqB,IAAIK,sBAAsBJ,KArDxC,EAwDjBK,aAAe,WACbhB,QAAQC,IAAI,UACZ,EAAKC,GAAGc,aAAa,CAACb,oBAAqB,EAAGC,oBAAqB,IAClEC,MAAK,SAAAC,GACJN,QAAQC,IAAIM,KAAKC,UAAUF,IAC3B,EAAKJ,GAAGO,oBAAoBH,MAC3B,SAAAW,QA9DY,EAiEjBC,aAAe,WACb,IAAMC,EAAYZ,KAAKK,MAAM,EAAKC,QAAQC,OAC1Cd,QAAQC,IAAI,oBAAqBkB,GAEjC,EAAKjB,GAAGkB,gBAAgB,IAAIC,gBAAgBF,KAlE9C,EAAKG,cAAgBC,IAAMC,YAC3B,EAAKC,eAAiBF,IAAMC,YAJX,E,gEAOE,IAAD,OAMlBE,KAAKxB,GAAK,IAAIyB,kBAJI,MAMlBD,KAAKxB,GAAG0B,eAAiB,SAACX,GACpBA,EAAEE,WAAWnB,QAAQC,IAAIM,KAAKC,UAAUS,EAAEE,aAGhDO,KAAKxB,GAAG2B,2BAA6B,SAACZ,GACpCjB,QAAQC,IAAIgB,IAGdS,KAAKxB,GAAG4B,WAAa,SAACb,GACpB,EAAKQ,eAAeM,QAAQC,UAAYf,EAAEgB,QAc5CC,UAAUC,aAXU,CAAEC,OAAO,EAAMC,OAAO,IAE3B,SAACJ,GACd,EAAKX,cAAcS,QAAQC,UAAYC,EACvC,EAAK/B,GAAGoC,UAAUL,MAGJ,SAAChB,GACfjB,QAAQC,IAAI,sBAAuBgB,Q,+BAqC7B,IAAD,OAEP,OACA,6BACE,2BAAOsB,MAAO,CACZC,MAAO,IAAKC,OAAQ,IAAKC,OAAQ,EAAGC,WAAY,SAC/CC,IAAKlB,KAAKJ,cAAeuB,UAAQ,EAACC,UAAQ,IAE7C,2BAAOP,MAAO,CACZC,MAAO,IAAKC,OAAQ,IAAKC,OAAQ,EAAGC,WAAY,SAC/CC,IAAKlB,KAAKD,eAAgBoB,UAAQ,EAACC,UAAQ,IAE9C,4BAAQC,QAASrB,KAAK3B,aAAtB,SACA,4BAAQgD,QAASrB,KAAKV,cAAtB,UACA,6BACA,8BAAU4B,IAAK,SAAAA,GAAQ,EAAK/B,QAAU+B,KACtC,6BACA,4BAAQG,QAASrB,KAAKhB,sBAAtB,0BACA,4BAAQqC,QAASrB,KAAKR,cAAtB,sB,GA3FY8B,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBxB,WACrBA,UAAUyB,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,a","file":"static/js/main.f45828bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.localVideoref = React.createRef()\n    this.remoteVideoref = React.createRef()\n  }\n\n  componentDidMount() {\n\n    const pc_config = null\n\n\n\n    this.pc = new RTCPeerConnection(pc_config)\n\n    this.pc.onicecandidate = (e) => {\n      if (e.candidate) console.log(JSON.stringify(e.candidate))\n    }\n\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e)\n    }\n\n    this.pc.onaddsteam = (e) => {\n      this.remoteVideoref.current.srcObject = e.stream\n    }\n\n    const constraints = { video: true, audio: true }\n\n    const succes = (stream) => {\n      this.localVideoref.current.srcObject = stream\n      this.pc.addStream(stream)\n    }\n\n    const failure = (e) => {\n      console.log('getUserMedia Error:', e)\n    }\n\n    navigator.getUserMedia(constraints, succes, failure)\n  }\n\n    createOffer = () => {\n      console.log('Offer')\n      this.pc.createOffer({offerToReceiveVideo: 1, offerToReceiveAudio: 1})\n      .then(sdp => {\n        console.log(JSON.stringify(sdp))\n        this.pc.setLocalDescription(sdp)\n      })\n    }\n\n    setRemoteDescription = () => {\n      const desc = JSON.parse(this.textref.value)\n\n      this.pc.setRemoteDescription(new RTCSessionDescription(desc))\n    }\n\n    createAnswer = () => {\n      console.log('Answer')\n      this.pc.createAnswer({offerToReceiveVideo: 1, offerToReceiveAudio: 1})\n      .then(sdp => {\n        console.log(JSON.stringify(sdp))\n        this.pc.setLocalDescription(sdp)\n      }, e => {})\n    }\n\n    addCandidate = () => {\n      const candidate = JSON.parse(this.textref.value)\n      console.log('Adding candidate:', candidate)\n\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n    }\n\n  render() {\n\n    return(\n    <div> \n      <video style={{\n        width: 640, height: 640, margin: 5, background: 'black'\n      }} ref={this.localVideoref} autoPlay controls></video>\n\n      <video style={{\n        width: 640, height: 640, margin: 5, background: 'black'\n      }} ref={this.remoteVideoref} autoPlay controls></video>\n\n      <button onClick={this.createOffer}>Offer</button>\n      <button onClick={this.createAnswer}>Answer</button>\n      <br/>\n      <textarea ref={ref => {this.textref = ref}}/>\n      <br/>\n      <button onClick={this.setRemoteDescription}>Set remote Description</button>\n      <button onClick={this.addCandidate}>Add Candidate</button>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}